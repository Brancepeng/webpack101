
1.无模块时代：
    在ajax还未提出之前，js还只是一种“玩具语言”，由Brendan Eich花了不到十天时间发明，用来在网页上进行表单校验、实现简单的动画效果等等，你可以回想一下那个网页上到处有公告块飘来飘去的时代。
    这个时候并没有前端工程师，服务端工程师只需在页面上随便写写js就能搞定需求。那个时候的前端代码大概像这样】

    if(xx){
         //.......
    }
    else{
         //xxxxxxxxxxx
    }
    for(var i=0; i<10; i++){
         //........
    }
    element.onclick = function(){
         //.......
    }

    代码简单的堆在一起，只要能从上往下依次执行就可以了。

2.模块萌芽时代
    2006年，ajax的概念被提出，前端拥有了主动向服务端发送请求并操作返回数据的能力，随着Google将此概念的发扬光大，
    传统的网页慢慢的向“富客户端”发展。前端的业务逻辑越来越多，代码也越来越多，于是一些问题就暴漏了出来：

    a.全局变量的灾难;

    小明定义了 i=1
    小刚在后续的代码里：i=0
    小明在接下来的代码里：if(i==1){...} //悲剧

    b. 函数命名冲突
    项目中通常会把一些通用的函数封装成一个文件，常见的名字有utils.js、common.js...
    小明定义了一个函数：function formatData(){   }
    小刚想实现类似功能，于是这么写：function formatData2(){   }
    小光又有一个类似功能，于是：function formatData3(){   }
    ......
    避免命名冲突就只能这样靠丑陋的方式人肉进行。

    c. 依赖关系不好管理

    b.js依赖a.js，标签的书写顺序必须是
    <script type="text/javascript" src="a.js"></script>
    <script type="text/javascript" src="b.js"></script>
    顺序不能错，也不能漏写某个。在多人开发的时候很难协调。

    萌芽时代的解决方案：

    1.用自执行函数来包装代码

    modA = function(){
         var a,b; //变量a、b外部不可见
         return {
              add : function(c){
                   a + b + c;
              },
              format: function(){
                   //......
              }
         }
    }()


    这样function内部的变量就对全局隐藏了，达到是封装的目的。但是这样还是有缺陷的，modA这个变量还是暴漏到全局了，
    随着模块的增多，全局变量还是会越来越多。

     2. java风格的命名空间
     为了避免全局变量造成的冲突，人们想到或许可以用多级命名空间来进行管理，于是，代码就变成了这个风格：
     app.util.modA = xxx;
     app.tools.modA = xxx;
     app.tools.modA.format = xxx;
     Yahoo的YUI早期就是这么做的，调用的时候不得不这么写：
     app.tools.modA.format();

     这样调用函数，写写都会觉得恶心，所以这种方式并没有被很多人采用，YUI后来也不用这种方式了。

      3. jQuery风格的匿名自执行函数

      (function(window){
          //代码

          window.jQuery = window.$ = jQuery;//通过给window添加属性而暴漏到全局
      })(window);

      jQuery的封装风格曾经被很多框架模仿， 通过匿名函数包装代码，所依赖的外部变量传给这个函数，在函数内部可以使用这些依赖，然后在函数的最后把模块自身暴漏给window。
      如果需要添加扩展，则可以作为jQuery的插件，把它挂载到$上。
      这种风格虽然灵活了些，但并未解决根本问题：所需依赖还是得外部提前提供、还是增加了全局变量。

模块化面临什么问题
    从以上的尝试中，可以归纳出js模块化需要解决那些问题：

    1. 如何安全的包装一个模块的代码？（不污染模块外的任何代码）
    2. 如何唯一标识一个模块？
    3. 如何优雅的把模块的API暴漏出去？（不能增加全局变量）
    4. 如何方便的使用所依赖的模块？
    围绕着这些问题，js模块化开始了一段艰苦而曲折的征途。

    源自nodejs的规范CommonJs

    2009年，nodejs横空出世，开创了一个新纪元，人们可以用js来编写服务端的代码了。如果说浏览器端的js即便没有模块化
    也可以忍的话，那服务端是万万不能的。大牛云集的CommonJs社区发力，制定了Modules/1.0（http://wiki.commonjs.or
    g/wiki/Modules/1.0）规范，首次定义了一个模块应该长啥样。具体来说，Modules/1.0规范包含以下内容：

    1. 模块的标识应遵循的规则（书写规范）
    2. 定义全局函数require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的API
    3. 如果被require函数引入的模块中也包含依赖，那么依次加载这些依赖
    4. 如果引入模块失败，那么require函数应该报一个异常
    5. 模块通过变量exports来向往暴漏API，exports只能是一个对象，暴漏的API须作为此对象的属性。

    此规范一出，立刻产生了良好的效果，由于其简单而直接，在nodejs中，这种模块化方案立刻被推广开了。
    遵循commonjs规范的代码看起来是这样的：（来自官方的例子）

    //math.js
    exports.add = function() {
        var sum = 0, i = 0, args = arguments, l = args.length;
        while (i < l) {
            sum += args[i++];
        }
        return sum;
    };
    //increment.js
    var add = require('math').add;
    exports.increment = function(val) {
        return add(val, 1);
    };
    //program.js
    var inc = require('increment').increment;
    var a = 1;
    inc(a); // 2
服务端向前端进军
Modules/1.0规范源于服务端，无法直接用于浏览器端，原因表现为：

1. 外层没有function包裹，变量全暴漏在全局。如上面例子中increment.js中的add。

2. 资源的加载方式与服务端完全不同。服务端require一个模块，直接就从硬盘或者内存中读取了，消耗的时间可以忽略。而
浏览器则不同，需要从服务端来下载这个文件，然后运行里面的代码才能得到API，需要花费一个http请求，也就是说，
require后面的一行代码，需要资源请求完成才能执行。由于浏览器端是以插入<script>标签的形式来加载资源的（ajax方
式不行，有跨域问题），没办法让代码同步执行，所以像commonjs那样的写法会直接报错。


所以，社区意识到，要想在浏览器环境中也能模块化，需要对规范进行升级。顺便说一句，CommonJs原来是叫ServerJs，从名字可以看出是专攻服务端的，为了统一前后端而改名CommonJs。（论起名的重要性~）
而就在社区讨论制定下一版规范的时候，内部发生了比较大的分歧，分裂出了三个主张，渐渐的形成三个不同的派别：

1.Modules/1.x派
这一波人认为，在现有基础上进行改进即可满足浏览器端的需要，既然浏览器端需要function包装，需要异步加载，那么新增
一个方案，能把现有模块转化为适合浏览器端的就行了，有点像“保皇派”。基于这个主张，制定了Modules/Transport（
http://wiki.commonjs.org/wiki/Modules/Transport）规范，提出了先通过工具把现有模块转化为复合浏览器上使用
的模块，然后再使用的方案。

browserify就是这样一个工具，可以把nodejs的模块编译成浏览器可用的模块。（Modules/Transport规范晦涩难懂，我也
不确定browserify跟它是何关联，有知道的朋友可以讲一下）

目前的最新版是Modules/1.1.1（http://wiki.commonjs.org/wiki/Modules/1.1.1），增加了一些require的属性，以及
模块内增加module变量来描述模块信息，变动不大。

2.Modules/Async派

这一波人有点像“革新派”，他们认为浏览器与服务器环境差别太大，不能沿用旧的模块标准。既然浏览器必须异步加载代码，那
么模块在定义的时候就必须指明所依赖的模块，然后把本模块的代码写在回调函数里。模块的加载也是通过下载-回调这样的过
程来进行，这个思想就是AMD的基础，由于“革新派”与“保皇派”的思想无法达成一致，最终从CommonJs中分裂了出去，独立制
定了浏览器端的js模块化规范AMD（Asynchronous Module Definition）（https://github.com/amdjs/amdjs-api/w
iki/AMD）
本文后续会继续讨论AMD规范的内容。


 3. Modules/2.0派
这一波人有点像“中间派”，既不想丢掉旧的规范，也不想像AMD那样推到重来。他们认为，Modules/1.0固然不适合浏览器，但
它里面的一些理念还是很好的，（如通过require来声明依赖），新的规范应该兼容这些，AMD规范也有它好的地方（例如模块
的预先加载以及通过return可以暴漏任意类型的数据，而不是像commonjs那样exports只能为object），也应采纳。最终他
们制定了一个Modules/Wrappings（http://wiki.commonjs.org/wiki/Modules/Wrappings）规范，此规范指出了一个模
块应该如何“包装”，包含以下内容：
1. 全局有一个module变量，用来定义模块
2. 通过module.declare方法来定义一个模块
3. module.declare方法只接收一个参数，那就是模块的factory，次factory可以是函数也可以是对象，如果是对象，那么模块输出就是此对象。
4. 模块的factory函数传入三个参数：require,exports,module，用来引入其他依赖和导出本模块API
5. 如果factory函数最后明确写有return数据（js函数中不写return默认返回undefined），那么return的内容即为模块的输出。


使用该规范的例子看起来像这样：
//可以使用exprots来对外暴漏API
module.declare(function(require, exports, module)
{
    exports.foo = "bar";
});
//也可以直接return来对外暴漏数据
module.declare(function(require)
{
return { foo: "bar" };
});

## AMD/RequireJs的崛起与妥协

    AMD思想正如其名，异步加载所需模块，然后在回调函数中执行主逻辑。这正是我们在浏览器端开发所习惯了的方式，其
    作者亲自实现了符合AMD规范的requirejs，AMD/RequireJs迅速被广大开发者所接受。
    AMD规范包含以下内容：

    1. 用全局函数define来定义模块，用法为：define(id?, dependencies?, factory);
    2. id为模块标识，遵从CommonJS Module Identifiers规范
    3. dependencies为依赖的模块数组，在factory中需传入形参与之一一对应
    4. 如果dependencies的值中有"require"、"exports"或"module"，则与commonjs中的实现保持一致
    5. 如果dependencies省略不写，则默认为["require", "exports", "module"]，factory中也会默认传入require,exports,module
    6. 如果factory为函数，模块对外暴漏API的方法有三种：return任意类型的数据、exports.xxx=xxx、module.exports=xxx
    7. 如果factory为对象，则该对象即为模块的返回值

    基于以上几点基本规范，我们便可以用这样的方式来进行模块化组织代码了：

    //a.js
    define(function(){
         console.log('a.js执行');
         return {
              hello: function(){
                   console.log('hello, a.js');
              }
         }
    });
    //b.js
    define(function(){
         console.log('b.js执行');
         return {
              hello: function(){
                   console.log('hello, b.js');
              }
         }
    });
    //main.js
    require(['a', 'b'], function(a, b){
         console.log('main.js执行');
         a.hello();
         $('#b').click(function(){
              b.hello();
         });
    })

    上面的main.js被执行的时候，会有如下的输出：
    a.js执行
    b.js执行
    main.js执行
    hello, a.js
    在点击按钮后，会输出：
    hello, b.js
这结局，如你所愿吗？大体来看，是没什么问题的，因为你要的两个hello方法都正确的执行了。
但是如果细细来看，b.js被预先加载并且预先执行了（被预先执行很关键），（第二行输出），b.hello这个方法是在点击了按钮之后才会执行，
如果用户压根就没点，那么b.js中的代码应不应该执行呢？

这其实也是AMD/RequireJs被吐槽的一点，预先下载没什么争议，由于浏览器的环境特点，被依赖的模块肯定要预先下载的。问
题在于，是否需要预先执行？如果一个模块依赖了十个其他模块，那么在本模块的代码执行之前，要先把其他十个模块的代码都
执行一遍，不管这些模块是不是马上会被用到。这个性能消耗是不容忽视的。

另一点被吐槽的是，





